*Creating a backend*

npm init
npm i express 

create server.js 
require express and assign it to app
call app.listen(port_num,func(){})
add a route by app.get("/contact",(req,res)=>{res.send("Somethingg")}) 

run node server.js

To avoid restarting server again and again to see your changes, npm i nodemon
Go to package.json and inside scripts, replace your test line with :     "server": "nodemon server.js"
Then nodemon start server to run the server with nodemon


*CORS*
Cross-origin resource sharing
It is used to configure which client is and which client is not allowed the access the server 
If the client is not allowed according to your CORS, it adds a header file in your response telling the browser that the request should be blocked or not.

npm i cors
const cors = require("cors")


*Postman*

Create a new collection
Add a request into that collection on your address like http://localhost:8000
The upper half is for req and the lower half is for res. View the Header in the res.

When you add app.use(cors());, you can see Access-Control-Allow-Origin *
When you use const options = {origin:"http://localhost:3000"} and app.use(cors(options)), you will see Access-Control-Allow-Origin http://localhost:3000, it means that only localhost:3000 is allowed, our fronted is hosted at this address, so e can try testing from there.
Add useSuccessStatus: 200 in the options to check the status


*Properly Applying Cors*

function options(req,res){let tmp; let origin = req.header("Origin) if(allowed.indexOf(origin) > -1){tmp ={origin:true, optionSuccessStatus:200}; else{tmp = {origin:false}}res(null,tmp)}}
Get the origin of request from the FE, and check whether it lies in the allowed array or nottt..
let allowed = ["http://localhost:3000","http://localhost:2005"];

You can't create route for every /something in your server.js, it is unprofessional.
So create a folder called "routes" and then create .js files for each of the routes.
e.g. user.js
const express = require("express"); const router = express.Router();
app.get("/user", (req, res) => {  res.send("Welcome to user home");});
module.exports = router;
e.g server.js
//userRoute is imported from user.js
const userRoute = require("./routes/user");
//whenever something / comes, go and call userRoute
app.use("/", userRoute);

you can also write app.use("/user",userRoute) and then add "/add" in user.js, so that whenever something/user/add comes, that function is excuted

* readdirSync *
//for all x in ./routes,map them to their functions separately. like whenever you get "/", call "./routes/x"
readdirSync("./routes").map((x) => app.use("/", require("./routes/" + x)));
//by using this, we won't need individual functions for each route.

*controllers folder*
we can keep all the functions of routes seperately in a different folder with the same name as its corresponding route
e.g., controllers/user.js
exports.f1 = (req, res) => {
  res.send("Welcome to user home");
};
e.g., routes/user.js
const { f1 } = require("../controllers/user");
router.get("/user", f1);

*.env*
npm i dotenv 
.env files are used to store important information

in server.js
const PORT = process.env.PORT;
in .env
PORT = 8000

*MongoDB Atlas*
Create a user, create a project, create a database, connect database to project
Save all the necessary details in .env file

//databases
mongoose
  .connect(process.env.DATABASE_URL, {
    useNewURLParser: true,
  })
  .then(() => {
    console.log("database successfully connected");
  }).catch((err)=>console.log("errorrrrrrrrrrr"));

*sending in JSON format*
in controllers/user.js

exports.f1 = (req, res) => {
  res.status(200).json({
    messsage: "aofjeoijeo",
    error: "irjfefi",
  });
}; 
//200 means all good
//status 204 means you won't get body, but the request was successful
//404 means not found
//400, bad request or error
//403, means forbidden, cannot be authenticated
to check ,go to postman on your project and type http://localhost:8000/user

*models folder*

which type of data and structure and validations are supposed to be handled by data.
Create js files for all the categories. e.g.,
models/data.js
const mongoose = require("mongoose");
const userSchema = mongoose.Schema({
  first_name: {
    type: String,
    required: [true, "first name is required"],
    trim: true,
    text: true,
  }, etc etc.
})

*Posting the data*
routes/user.js
router.post("/register", register);
controllers/user.js
exports.register = (req, res) => {
  console.log(req.body);
};

Postman http://localhost:8000/register
Post -> Body -> Raw -> JSON
{
  "first_name": "Pranay",
  "last_name":"Parikh",
  "username":"pranne",
  "email":"pranayparikh2004@gmail.com",
  "password":"Qwert",
  "bYear":"2004",
  "bMonth":"2",
  "bDay":"2",
  "gender":"male"
}

Post

MongoDB Compass. Connect Database. Users. You'll receive sent req.

//Validity email regex     return String(email).toLowerCase().match(/^([a-z\d\.-])+@([a-z\d-]+)\.([a-z]{2,12})(\.[a-z]{2,12})?$/);
While taking input in user.js :
  if (!validateEmail(email)) {
      return res.status(400).json({
        message: "invalid email",
      });
    }

//Checking uniqueness of the given email:
 const check = await User.findOne({ email });
    if (check) { return res.status(400).json({
        message: "This email is already registered na..",
      });
    }

//password encryption and decryp using bcrypt. 
npm i bcrypt
    const cryptedPass = await bcrypt.hash(password, 12);
    console.log(cryptedPass);



whenever we check in the database, use async function and async and await keywords.

time in milliseconds or quantity is calculated from UNIX system origin start that is from 1970. +newDate() return those milliseconds.

JSON web tokens JWT
npm install jsonwebtoken --save
const jwt = require("jsonwebtoken");
exports.generateToken = (payload, expired) => {
  return jwt.sign(payload, process.env.TOKEN_SECRET, {
    expiresIn: expired,
  });
};
    const emailVerificationToken = generateToken(
      { id: user._id.toString() },
      "30m"
    );

adding google o auth
npm i googleapis nodemailer