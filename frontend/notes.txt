npm i react-router-dom redux redux react-redux redux0devtools-extension

in index.js import { BrowserRouter as Routerr } from "react-router-dom";
in App.js 
import { Routes, Route } from "react-router-dom";
import Login from "./pages/login";
function App() {
  return (
    <div>
      <Routes>
        <Route path="/login" element={<Login />} />
      </Routes>
    </div>
  );
}
export default App;


//using reducer and redux.. difference between normal imports vs {} imports ????

npm i formik and npm i yup for using forms in login and sign-up ig
if you use Link, it doesn't refresh, it just looks for the changes in the state
formik is used for creating form and Yup is used for error validation messages convenience increased more

npm i react-responsive

centring trick (for absolute position given element(s))- 
.register {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.register_header span:first-of-type {
  font-weight: 700;
  font-size: 32px;
}
.register_header span:last-of-type {
  font-size: 15px;
  color: var(--color-secondary);
}

import React, { useState } from "react";
import RegisterInput from "../inputs/registerinput/index";
const userInfos = {
  first_name: "",
  last_name: "",
  email: "",
  password: "",
  bYear: new Date().getDate,
  bMonth: new Date().getMonth + 1,
  bDay: new Date().getFullYear,
  gender: "",
};
export default function RegisterForm() {
  const [user, setUser] = useState(userInfos);
  const handleRegisterChange = (e) => {
    const { name, value } = e.target;
    setUser({ ...user, [name]: value });
  };


  const yearLatest = new Date().getFullYear();
  const years = Array.from(new Array(100), (val, index) => yearLatest - index);
  const months = Array.from(new Array(12), (val, index) => 1 + index);
  const getDays = () => {
    return new Date(bYear, bMonth, 0).getDate();
  };



 <input
  type="radio"
  name="gender"
  id="female"
  value="female"
  onChange={handleRegisterChange}
                    />

Using && for conditoinal rendering

              {error&& <div className="error_text">{error}</div>}
              {error&& <div className="success_text">{success}</div>}
          
npm install --save react-spinners
import { useState, CSSProperties } from "react";
import ClipLoader from "react-spinners/ClipLoader";

  <ClipLoader
        color={color}
        loading={loading}
        cssOverride={override}
        size={150}
        aria-label="Loading Spinner"
        data-testid="loader"
      />
    </div>

npm install --save react-spinners
loading animation

npm i axios for sending requests from the frontend to backend
const registerSubmmit = async () => {
    try {
      setSuccess("");
      setError("");
      setLoading(true);
      const { data } = await axios.post(
        `${process.env.REACT_APP_BACKEND_URL}/register`,
        {
          first_name,
          last_name,
          email,
          password,
          bYear,
          bMonth,
          bDay,
          gender,
        }
      );
      setLoading(false);
      setSuccess(
        "Registered Successfully ! Let's just quickly verify your email"
      );
      setError("");
    } catch (error) {
      setLoading(false);
      setSuccess("");
      setError(error.response.data.message);
    }
  };



  npm i js-cookies
        //storing data in cookies by redux
      const { message, ...rest } = data;
      setTimeout(() => {
        dispatch({ type: "LOGIN", payload: rest });
        Cookies.setItem("user", JSON.stringify(rest));
        navigate("/");
      }, 2000);

in reducers/userReducer.js
export function userReducer(
  //to prevent the loss of cookies on refresh
  state = Cookies.get("user") ? JSON.parse(Cookies.get("user")) : null,
  action
)

//showing the sign-up popup on the  same page as login
use blur 
.blur {
  position: fixed;
  top: 0;
  right: 0;
  left: 0;
  bottom: 0;
  background-color: rgba(238, 212, 247, 0.94);
  z-index: 99;
}

//To go from one link to other
import { Link } from "react-router-dom";
<Link to="/" className="header_logo">
<div className="circle">
<h1>Click me ya plz</h1>
</div>
</Link>

index.css 
src/components/header 
src/helpers
src/data

//when there's a lot of data, put the data in a json format / object format in a data.js, 
then map your function/component to that file and slice the resultant according to your need
 export const menu = [
  {
    name: "Campus",
    icon: "campus",
    description: "A unique, exclusive space for college students on Facebook.",
  },
  {
    name: "Events",
    icon: "events",
    description: "Organize or find events in your campus.",
  }
  .....
  ]
 ---------------
  import menu

 <div className="all_menu_group">
            <div className="all_menu_group_header">More from Pranay</div>
            {menu.slice(21, 25).map((item, i) => (
              <AllMenuItem
                name={item.name}
                description={item.description}
                icon={item.icon}
                key={i}
              />
            ))}
  </div>

 

//wowww, multiple menus, single variable..
putting
const [visibility, setVisibility] = useState(-1)
when you want main menu 
use this same variable for displaying all the different menus by incrementing or decrementing its values.
Coz at one time only one menu is to be shown, that's why we can work with only 1 variable also.
onclick: setVisibility(0)
then inside the main menu, the settings icon: setVisibility(1)
then you can come out again by when you click on the menu icon coz setVisibility(0)

//why are Labels used..?

the browser first sees if any media queries need to be applied and then it checks your written code
//when you use Desktop-first, 
you use things like:
@media (max-width: 1200 px){
  .....
}
it means that as long as screen is less than 1200 px wide, use these

but when you do mobile-first, 
you use stuff like:
@media (min-width:1200 px){
  it means that as soon as we cross 1200 px, use this
}

---------------------------
Protected Routes
//to not let  